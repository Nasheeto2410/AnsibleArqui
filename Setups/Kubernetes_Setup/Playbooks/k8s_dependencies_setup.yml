---
- name: Ensure known_hosts is clean and updated
  hosts: localhost
  gather_facts: false
  tasks:
      - name: Remove existing SSH key from known_hosts (if present)
        ansible.builtin.shell: ssh-keygen -R {{ hostvars[item].ansible_host | default(item) }} || true
        args:
            executable: /bin/bash
        loop: "{{ groups['main_control_plane'] + groups['control_plane'] + groups['workers'] }}"

      - name: Add current host key to known_hosts
        ansible.builtin.shell: ssh-keyscan {{ hostvars[item].ansible_host | default(item) }} >> ~/.ssh/known_hosts
        args:
            executable: /bin/bash
        loop: "{{ groups['main_control_plane'] + groups['control_plane'] + groups['workers'] }}"

- name: Kubernetes Node Dependency Setup
  hosts: all
  become: true
  vars_files:
      - secrets_k8s.yml
  tasks:
      - name: Set hostname using hostnamectl
        command: hostnamectl set-hostname {{ inventory_hostname }}

      - name: Ensure hostname is added to 127.0.0.1 line in /etc/hosts
        lineinfile:
            path: /etc/hosts
            regexp: '^127\.0\.0\.1'
            line: "127.0.0.1 localhost {{ inventory_hostname }}"
            state: present

      - name: Disable swap immediately
        command: swapoff -a

      - name: Disable swap permanently in fstab
        replace:
            path: /etc/fstab
            regexp: '^(.*\s+swap\s+.*)$'
            replace: '# \1'

      - name: Ensure required kernel modules are loaded
        modprobe:
            name: "{{ item }}"
            state: present
        loop:
            - overlay
            - br_netfilter

      - name: Persist kernel modules
        copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
                overlay
                br_netfilter

      - name: Set sysctl parameters for Kubernetes
        copy:
            dest: /etc/sysctl.d/k8s.conf
            content: |
                net.bridge.bridge-nf-call-iptables = 1
                net.ipv4.ip_forward = 1
                net.bridge.bridge-nf-call-ip6tables = 1

      - name: Apply sysctl settings
        command: sysctl --system

      - name: Install required base packages
        apt:
            name:
                - curl
                - apt-transport-https
                - ca-certificates
                - gnupg
                - lsb-release
            state: present
            update_cache: yes

      - name: Install networking tools required by Kubernetes
        apt:
            name:
                - iptables
                - ethtool
                - iproute2
            state: present
            update_cache: yes

      - name: Install containerd
        apt:
            name: containerd
            state: present

      - name: Add Kubernetes apt GPG key (v1.32)
        shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
        args:
            creates: /usr/share/keyrings/kubernetes-archive-keyring.gpg

      - name: Add Kubernetes apt repository (v1.32)
        copy:
            dest: /etc/apt/sources.list.d/kubernetes.list
            content: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"

      - name: Install Kubernetes tools (kubelet, kubeadm, kubectl)
        apt:
            name:
                - kubelet
                - kubeadm
                - kubectl
            state: present
            update_cache: yes

      - name: Hold Kubernetes tools at current version
        command: apt-mark hold {{ item }}
        loop:
            - kubelet
            - kubeadm
            - kubectl

      - name: Start containerd service before config generation
        systemd:
            name: containerd
            state: started
            enabled: true

      - name: Create containerd config directory
        file:
            path: /etc/containerd
            state: directory
            mode: "0755"

      - name: Generate full containerd config using sudo bash redirection
        shell: bash -c 'containerd config default | sudo tee /etc/containerd/config.toml'

      - name: Set SystemdCgroup = true with correct indentation
        lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^\s*SystemdCgroup\s*='
            line: "            SystemdCgroup = true"
            insertafter: '^\s*\[plugins\."io.containerd.grpc.v1.cri"\.containerd\.runtimes\.runc\.options\]'

      - name: Set bin_dir to /opt/cni/bin with correct indentation
        lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^\s*bin_dir\s*='
            line: '      bin_dir = "/opt/cni/bin"'
            insertafter: '^\s*\[plugins\."io.containerd.grpc.v1.cri"\.cni\]'

      - name: Set sandbox_image to pause:3.10 with correct indentation
        lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^\s*sandbox_image\s*='
            line: '    sandbox_image = "registry.k8s.io/pause:3.10"'
            insertafter: '^\s*\[plugins\."io.containerd.grpc.v1.cri"\]'

      - name: Restart containerd to apply config
        systemd:
            name: containerd
            state: restarted
            enabled: true

      - name: Ensure system-wide PATH includes sbin directories
        copy:
            dest: /etc/profile.d/global-path-fix.sh
            content: |
                export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
            mode: "0755"

      - name: Reload systemd daemon
        command: systemctl daemon-reexec

      - name: Restart kubelet service
        systemd:
            name: kubelet
            state: restarted
            enabled: true
